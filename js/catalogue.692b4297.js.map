{"version":3,"file":"js/catalogue.692b4297.js","mappings":"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","sources":["webpack://badge-generator/./src/components/Checkbox.vue?519b","webpack://badge-generator/./src/components/Checkbox.vue","webpack://badge-generator/./src/components/Checkbox.vue?2e6e","webpack://badge-generator/./src/lib.ts","webpack://badge-generator/./src/views/Catalogue.vue?b87f","webpack://badge-generator/./src/views/Catalogue.vue","webpack://badge-generator/./src/core/catalogue.ts","webpack://badge-generator/./src/views/Catalogue.vue?bb28","webpack://badge-generator/./src/components/Code.vue?b005","webpack://badge-generator/./src/components/Code.vue","webpack://badge-generator/./src/components/Code.vue?52d4"],"sourcesContent":["import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\"\n\nconst _hoisted_1 = [\"for\"]\nconst _hoisted_2 = [\"id\", \"checked\"]\nconst _hoisted_3 = {\n  key: 0,\n  class: \"note\"\n}\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_Markdown = _resolveComponent(\"Markdown\")!\n\n  return (_openBlock(), _createElementBlock(\"div\", null, [\n    _createElementVNode(\"label\", { for: _ctx.slug }, _toDisplayString(_ctx.label), 9, _hoisted_1),\n    _createElementVNode(\"input\", {\n      id: _ctx.slug,\n      type: \"checkbox\",\n      checked: _ctx.modelValue,\n      onChange: _cache[0] || (_cache[0] = ($event: any) => (\n        _ctx.$emit('update:modelValue', ($event.target as HTMLInputElement).checked)\n      ))\n    }, null, 40, _hoisted_2),\n    (_ctx.note)\n      ? (_openBlock(), _createElementBlock(\"small\", _hoisted_3, [\n          _createVNode(_component_Markdown, { content: _ctx.note }, null, 8, [\"content\"])\n        ]))\n      : _createCommentVNode(\"\", true)\n  ]))\n}","<template>\n  <div>\n    <label :for=\"slug\">\n      {{ label }}\n    </label>\n\n    <input\n      :id=\"slug\"\n      type=\"checkbox\"\n      :checked=\"modelValue\"\n      v-on:change=\"\n        $emit('update:modelValue', ($event.target as HTMLInputElement).checked)\n      \"\n    />\n\n    <small class=\"note\" v-if=\"note\">\n      <Markdown :content=\"note\"></Markdown>\n    </small>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\n\nimport Markdown from \"@/components/Markdown.vue\";\nimport { slugify } from \"@/lib\";\n\nexport default defineComponent({\n  name: \"CheckboxItem\",\n  components: {\n    Markdown,\n  },\n  props: {\n    label: { type: String, required: true },\n    modelValue: { type: Boolean, required: false },\n    note: { type: String, required: false },\n  },\n  computed: {\n    slug(): string {\n      return slugify(\"box\", this.label);\n    },\n  },\n});\n</script>\n","import { render } from \"./Checkbox.vue?vue&type=template&id=eac29fba&ts=true\"\nimport script from \"./Checkbox.vue?vue&type=script&lang=ts\"\nexport * from \"./Checkbox.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Lib helper functions for Vue app.\n */\n\nexport function stripLeadingSlash(value: string) {\n  return value.replace(/^\\/+/, \"\");\n}\n\nexport function slugify(...values: string[]) {\n  const value = values.join(\"-\");\n\n  return value\n    .replace(/^\\s+|\\s+$/g, \"\") // Trim\n    .toLowerCase()\n    .replace(/[^a-z0-9 -]/g, \"\")\n    .replace(/\\s+/g, \"-\") // Collapse whitespace\n    .replace(/-+/g, \"-\"); // Collapse dashes\n}\n","import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createVNode as _createVNode, createStaticVNode as _createStaticVNode } from \"vue\"\n\nconst _hoisted_1 = { class: \"images container-lg\" }\nconst _hoisted_2 = { class: \"row\" }\nconst _hoisted_3 = { class: \"col-12\" }\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_Markdown = _resolveComponent(\"Markdown\")!\n  const _component_CodeItem = _resolveComponent(\"CodeItem\")!\n\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _cache[1] || (_cache[1] = _createStaticVNode(\"<div class=\\\"row\\\"><div class=\\\"col-12\\\"><h1>Catalogue</h1><p> Choose from pre-built badges that can be copied to your docs and mostly used as they are. You can tweak the version numbers as needed. </p><p> The badges here are all <b>static</b> and do not depend on anything. Tip: for NPM packages, rather use the &quot;Package&quot; tab to make a dynamic badge that will load a version number based on your <code>package.json</code> file. The badges are included with clickable external clicks which take you to the homepage of that tool. </p><p> Related - <a href=\\\"https://ileriayo.github.io/markdown-badges/\\\">Markdown Badges</a> site with a large catalogue of products using logos and colors, or <a href=\\\"https://simpleicons.org/\\\">Simple Icons</a> if you want to use their search feature then use the icon and color that comes up for your own shields.io badge. </p></div></div>\", 1)),\n    _createElementVNode(\"div\", _hoisted_2, [\n      _createElementVNode(\"div\", _hoisted_3, [\n        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.renderedBadges, (item) => {\n          return (_openBlock(), _createElementBlock(\"div\", { key: item }, [\n            _createVNode(_component_Markdown, { content: item }, null, 8, [\"content\"]),\n            _createVNode(_component_CodeItem, { code: item }, null, 8, [\"code\"]),\n            _cache[0] || (_cache[0] = _createElementVNode(\"br\", null, null, -1))\n          ]))\n        }), 128))\n      ])\n    ])\n  ]))\n}","<template>\n  <div class=\"images container-lg\">\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <h1>Catalogue</h1>\n\n        <p>\n          Choose from pre-built badges that can be copied to your docs and\n          mostly used as they are. You can tweak the version numbers as needed.\n        </p>\n        <p>\n          The badges here are all <b>static</b> and do not depend on anything.\n          Tip: for NPM packages, rather use the \"Package\" tab to make a dynamic\n          badge that will load a version number based on your\n          <code>package.json</code> file. The badges are included with clickable\n          external clicks which take you to the homepage of that tool.\n        </p>\n        <p>\n          Related -\n          <a href=\"https://ileriayo.github.io/markdown-badges/\"\n            >Markdown Badges</a\n          >\n          site with a large catalogue of products using logos and colors, or\n          <a href=\"https://simpleicons.org/\">Simple Icons</a> if you want to use\n          their search feature then use the icon and color that comes up for\n          your own shields.io badge.\n        </p>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <div v-for=\"item in renderedBadges\" :key=\"item\">\n          <Markdown :content=\"item\"></Markdown>\n\n          <CodeItem :code=\"item\" />\n          <br />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\n\nimport CodeItem from \"@/components/Code.vue\";\nimport Markdown from \"@/components/Markdown.vue\";\nimport { renderBadges } from \"@/core/catalogue\";\n\nexport default defineComponent({\n  name: \"CatalogueItem\",\n  components: {\n    Markdown,\n    CodeItem,\n  },\n  computed: {\n    renderedBadges() {\n      return renderBadges();\n    },\n  },\n});\n</script>\n","import { BADGE_DEFAULTS, BADGE_DETAILS } from \"@/constants/catalogue\";\nimport { genericBadge } from \"./genericBadge\";\n\n/**\n * Convert data for all fixed catalogue badges into Markdown badges.\n */\nexport function renderBadges(): string[] {\n  return BADGE_DETAILS.map((badge) => {\n    const isLarge =\n      typeof badge.isLarge !== \"undefined\"\n        ? badge.isLarge\n        : BADGE_DEFAULTS.IS_LARGE;\n\n    return genericBadge(\n      badge.label,\n      badge.message,\n      BADGE_DEFAULTS.COLOR,\n      isLarge,\n      badge.target,\n      badge.logo,\n      badge.logo ? BADGE_DEFAULTS.LOGO_COLOR : \"\",\n      false,\n      badge.altText,\n      badge.hoverTitle\n    );\n  });\n}\n","import { render } from \"./Catalogue.vue?vue&type=template&id=08ddee96&ts=true\"\nimport script from \"./Catalogue.vue?vue&type=script&lang=ts\"\nexport * from \"./Catalogue.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_Checkbox = _resolveComponent(\"Checkbox\")!\n\n  return (_openBlock(), _createElementBlock(\"div\", null, [\n    _createVNode(_component_Checkbox, {\n      label: \"Show HTML\",\n      modelValue: _ctx.asHtml,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((_ctx.asHtml) = $event))\n    }, null, 8, [\"modelValue\"]),\n    _cache[1] || (_cache[1] = _createElementVNode(\"br\", null, null, -1)),\n    _createElementVNode(\"pre\", null, [\n      _createElementVNode(\"code\", {\n        ref: \"codeBlock\",\n        class: \"markdown\"\n      }, _toDisplayString(_ctx.outputCode), 513)\n    ])\n  ]))\n}","// Render Markdown as a codeblock. Apply highlighting on content changes.\n<template>\n  <div>\n    <Checkbox label=\"Show HTML\" v-model=\"asHtml\" />\n    <br />\n\n    <pre><code ref=\"codeBlock\" class=\"markdown\">{{ outputCode }}</code></pre>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport hljs from \"highlight.js\";\nimport { defineComponent } from \"vue\";\n\nimport { cleanHtml, mdToHTML } from \"@/core/markdown\";\nimport Checkbox from \"./Checkbox.vue\";\n\nexport default defineComponent({\n  name: \"CodeItem\",\n  components: {\n    Checkbox,\n  },\n  props: {\n    code: { type: String, required: true },\n  },\n  data() {\n    return {\n      asHtml: false,\n    };\n  },\n  computed: {\n    outputCode(): String {\n      if (this.asHtml) {\n        const htmlCode = mdToHTML(this.code);\n\n        return cleanHtml(htmlCode);\n      }\n      return this.code;\n    },\n  },\n  methods: {\n    highlight() {\n      const block = this.$refs.codeBlock as HTMLElement;\n      hljs.highlightElement(block);\n    },\n  },\n  mounted() {\n    this.highlight();\n  },\n  updated() {\n    this.highlight();\n  },\n});\n</script>\n","import { render } from \"./Code.vue?vue&type=template&id=f62513dc&ts=true\"\nimport script from \"./Code.vue?vue&type=script&lang=ts\"\nexport * from \"./Code.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["_hoisted_1","_hoisted_2","_hoisted_3","key","class","render","_ctx","_cache","$props","$setup","$data","$options","_component_Markdown","for","slug","label","id","type","checked","modelValue","$emit","note","content","name","components","Markdown","props","String","required","Boolean","computed","this","__exports__","stripLeadingSlash","value","replace","slugify","values","join","toLowerCase","_component_CodeItem","renderedBadges","item","code","renderBadges","map","badge","isLarge","IS_LARGE","genericBadge","message","COLOR","target","logo","LOGO_COLOR","altText","hoverTitle","CodeItem","_component_Checkbox","asHtml","$event","ref","outputCode","Checkbox","data","htmlCode","methods","highlight","block","$refs","codeBlock","mounted","updated"],"sourceRoot":""}